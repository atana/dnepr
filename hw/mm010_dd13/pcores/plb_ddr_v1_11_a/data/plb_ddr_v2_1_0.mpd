## Copyright (c) 1995-2007 Xilinx, Inc.  All rights reserved.

## You may copy and modify these files for your own internal use solely with
## Xilinx programmable logic devices and  Xilinx EDK system or create IP
## modules solely for Xilinx programmable logic devices and Xilinx EDK system.
## No rights are granted to distribute any files unless they are distributed in
## Xilinx programmable logic devices.
###################################################################
##
## Name     : plb_ddr
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN plb_ddr

## Peripheral Options
OPTION ALERT = An example UCF for this core is available and must be modified for use in the system. Please refer to the EDK Getting Started guide for the location of this file.
OPTION RUN_NGCBUILD = TRUE
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VHDL
OPTION LAST_UPDATED = 8.2.1
OPTION USAGE_LEVEL = BASE_USER
OPTION PLATGEN_SYSLEVEL_UPDATE_PROC = generate_corelevel_ucf
OPTION SYSLEVEL_DRC_PROC = check_syslevel_settings
OPTION IPLEVEL_DRC_PROC = check_iplevel_settings
OPTION DESC = PLB DDR SDRAM Controller
OPTION LONG_DESC = Processor Local Bus Double Data Rate Synchronous DRAM (PLB DDR SDRAM) controller
OPTION IP_GROUP = Memory and Memory Controller:PPC
OPTION ARCH_SUPPORT_MAP = (virtex2p=DEPRECATED, virtex4lx=DEPRECATED, virtex4sx=DEPRECATED, virtex4fx=DEPRECATED)

IO_INTERFACE IO_IF = ddr_0, IO_TYPE = XIL_DDR_V1

## Bus Interfaces
BUS_INTERFACE BUS = SPLB, BUS_STD = PLB, BUS_TYPE = SLAVE

## Generics for VHDL or Parameters for Verilog
PARAMETER C_INCLUDE_BURST_CACHELN_SUPPORT = 0, DT = INTEGER, RANGE = (0:1), DESC = Include burst and cacheline transactions support, VALUES = (0= FALSE , 1= TRUE )
PARAMETER C_REG_DIMM = 0, DT = INTEGER, RANGE = (0:1), IO_IF = ddr_0, IO_IS = C_REG_DIMM, PERMIT = BASE_USER, DESC = DDR device is a registerd DIMM, VALUES = (0= FALSE , 1= TRUE )
PARAMETER C_NUM_BANKS_MEM = 1, DT = INTEGER, RANGE = (1:4), IO_IF = ddr_0, IO_IS = C_NUM_BANKS_MEM
PARAMETER C_NUM_CLK_PAIRS = 1, DT = INTEGER, RANGE = (1:4), IO_IF = ddr_0, IO_IS = C_NUM_CLK_PAIRS
PARAMETER C_FAMILY = virtex2, DT = STRING
PARAMETER C_INCLUDE_ECC_SUPPORT = 0, DT = INTEGER, RANGE = (0:1), IO_IS = C_INCLUDE_ECC_SUPPORT
PARAMETER C_ENABLE_ECC_REG = 1, DT = INTEGER
PARAMETER C_ECC_DEFAULT_ON = 1, DT = INTEGER
PARAMETER C_INCLUDE_ECC_INTR = 0, DT = INTEGER, RANGE = (0,1)
PARAMETER C_INCLUDE_ECC_TEST = 0, DT = INTEGER, RANGE = (0,1)
PARAMETER C_ECC_SEC_THRESHOLD = 1, DT = INTEGER, RANGE = (1:4096)
PARAMETER C_ECC_DEC_THRESHOLD = 1, DT = INTEGER, RANGE = (1:4096)
PARAMETER C_ECC_PEC_THRESHOLD = 1, DT = INTEGER, RANGE = (1:4096)
PARAMETER NUM_ECC_BITS = 7, DT = INTEGER, RANGE = (7)
PARAMETER C_DDR_TMRD = 15000, DT = INTEGER, IO_IF = ddr_0, IO_IS = C_DDR_TMRD
PARAMETER C_DDR_TWR = 15000, DT = INTEGER, IO_IF = ddr_0, IO_IS = C_DDR_TWR
PARAMETER C_DDR_TWTR = 1, DT = INTEGER, IO_IF = ddr_0, IO_IS = C_DDR_TWTR
PARAMETER C_DDR_TRAS = 40000, DT = INTEGER, IO_IF = ddr_0, IO_IS = C_DDR_TRAS
PARAMETER C_DDR_TRC = 65000, DT = INTEGER, IO_IF = ddr_0, IO_IS = C_DDR_TRC
PARAMETER C_DDR_TRFC = 75000, DT = INTEGER, IO_IF = ddr_0, IO_IS = C_DDR_TRFC
PARAMETER C_DDR_TRCD = 20000, DT = INTEGER, IO_IF = ddr_0, IO_IS = C_DDR_TRCD
PARAMETER C_DDR_TRRD = 15000, DT = INTEGER, IO_IF = ddr_0, IO_IS = C_DDR_TRRD
PARAMETER C_DDR_TREFC = 70000000, DT = INTEGER, IO_IF = ddr_0, IO_IS = C_DDR_TREFC
PARAMETER C_DDR_TREFI = 7800000, DT = INTEGER, IO_IF = ddr_0, IO_IS = C_DDR_TREFI
PARAMETER C_DDR_TRP = 20000, DT = INTEGER, IO_IF = ddr_0, IO_IS = C_DDR_TRP
PARAMETER C_DDR_CAS_LAT = 2, DT = INTEGER, RANGE = (2,3)
PARAMETER C_DDR_DWIDTH = 32, DT = INTEGER, RANGE = (32,64), IO_IF = ddr_0, IO_IS = C_DDR_DWIDTH, PERMIT = BASE_USER, DESC = Data Width
PARAMETER C_DDR_AWIDTH = 13, DT = INTEGER, IO_IF = ddr_0, IO_IS = C_DDR_AWIDTH, PERMIT = BASE_USER, DESC = Address Width
PARAMETER C_DDR_COL_AWIDTH = 9, DT = INTEGER, IO_IF = ddr_0, IO_IS = C_DDR_COL_AWIDTH, PERMIT = BASE_USER, DESC = Column Address Width
PARAMETER C_DDR_BANK_AWIDTH = 2, DT = INTEGER, IO_IF = ddr_0, IO_IS = C_DDR_BANK_AWIDTH, PERMIT = BASE_USER, DESC = Bank Address Width
PARAMETER C_MEM0_BASEADDR = 0b11111111111111111111111111111111, DT = std_logic_vector, BUS = SPLB, ADDRESS = BASE, PAIR = C_MEM0_HIGHADDR, ADDR_TYPE = MEMORY, ASSIGNMENT = REQUIRE, MIN_SIZE = 0x08, IO_IF = ddr_0, IO_IS = C_BASEADDR, CACHEABLE = TRUE, PERMIT = BASE_USER, DESC = Bank 0 Base Address, ISVALID = (C_NUM_BANKS_MEM>=1)
PARAMETER C_MEM0_HIGHADDR = 0b00000000000000000000000000000000, DT = std_logic_vector, BUS = SPLB, ADDRESS = HIGH, PAIR = C_MEM0_BASEADDR, ADDR_TYPE = MEMORY, ASSIGNMENT = REQUIRE, IO_IF = ddr_0, IO_IS = C_HIGHADDR, PERMIT = BASE_USER, DESC = Bank 0 High Address
PARAMETER C_MEM1_BASEADDR = 0b11111111111111111111111111111111, DT = std_logic_vector, BUS = SPLB, ADDRESS = BASE, PAIR = C_MEM1_HIGHADDR, ADDR_TYPE = MEMORY, MIN_SIZE = 0x08, IO_IF = ddr_0, IO_IS = C_MEM1_BASEADDR, CACHEABLE = TRUE, ISVALID = (C_NUM_BANKS_MEM>=2)
PARAMETER C_MEM1_HIGHADDR = 0b00000000000000000000000000000000, DT = std_logic_vector, BUS = SPLB, ADDRESS = HIGH, PAIR = C_MEM1_BASEADDR, ADDR_TYPE = MEMORY, IO_IF = ddr_0, IO_IS = C_MEM1_HIGHADDR
PARAMETER C_MEM2_BASEADDR = 0b11111111111111111111111111111111, DT = std_logic_vector, BUS = SPLB, ADDRESS = BASE, PAIR = C_MEM2_HIGHADDR, ADDR_TYPE = MEMORY, MIN_SIZE = 0x08, IO_IF = ddr_0, IO_IS = C_MEM2_BASEADDR, CACHEABLE = TRUE, ISVALID = (C_NUM_BANKS_MEM>=3)
PARAMETER C_MEM2_HIGHADDR = 0b00000000000000000000000000000000, DT = std_logic_vector, BUS = SPLB, ADDRESS = HIGH, PAIR = C_MEM2_BASEADDR, ADDR_TYPE = MEMORY, IO_IF = ddr_0, IO_IS = C_MEM2_HIGHADDR
PARAMETER C_MEM3_BASEADDR = 0b11111111111111111111111111111111, DT = std_logic_vector, BUS = SPLB, ADDRESS = BASE, PAIR = C_MEM3_HIGHADDR, ADDR_TYPE = MEMORY, MIN_SIZE = 0x08, IO_IF = ddr_0, IO_IS = C_MEM3_BASEADDR, CACHEABLE = TRUE, ISVALID = (C_NUM_BANKS_MEM>=4)
PARAMETER C_MEM3_HIGHADDR = 0b00000000000000000000000000000000, DT = std_logic_vector, BUS = SPLB, ADDRESS = HIGH, PAIR = C_MEM3_BASEADDR, ADDR_TYPE = MEMORY, IO_IF = ddr_0, IO_IS = C_MEM3_HIGHADDR
PARAMETER C_ECC_BASEADDR = 0b11111111111111111111111111111111, DT = std_logic_vector, BUS = SPLB, ADDRESS = BASE, PAIR = C_ECC_HIGHADDR, ADDR_TYPE = REGISTER, MIN_SIZE = 0x200, IO_IS = C_ECC_BASEADDR, ISVALID = (C_INCLUDE_ECC_SUPPORT==1)
PARAMETER C_ECC_HIGHADDR = 0b00000000000000000000000000000000, DT = std_logic_vector, BUS = SPLB, ADDRESS = HIGH, PAIR = C_ECC_BASEADDR, ADDR_TYPE = REGISTER, IO_IS = C_ECC_HIGHADDR
PARAMETER C_PLB_NUM_MASTERS = 8, DT = INTEGER, BUS = SPLB
PARAMETER C_PLB_MID_WIDTH = 1, DT = INTEGER, BUS = SPLB
PARAMETER C_PLB_AWIDTH = 32, DT = INTEGER, BUS = SPLB, ASSIGNMENT = CONSTANT
PARAMETER C_PLB_DWIDTH = 64, DT = INTEGER, BUS = SPLB, ASSIGNMENT = CONSTANT
PARAMETER C_PLB_CLK_PERIOD_PS = 10000, DT = INTEGER, BUS = SPLB, IO_IS = clk_freq
PARAMETER C_SIM_INIT_TIME_PS = 200000000, DT = INTEGER

## Ports
PORT PLB_Clk = "", DIR = I, SIGIS = Clk, BUS = SPLB
PORT PLB_Clk_n = "", DIR = I
PORT Clk90_in = "", DIR = I
PORT Clk90_in_n = "", DIR = I
PORT DDR_Clk90_in = "", DIR = I
PORT DDR_Clk90_in_n = "", DIR = I
PORT PLB_Rst = PLB_Rst, DIR = I, SIGIS = Rst, BUS = SPLB
PORT PLB_ABus = PLB_ABus, DIR = I, VEC = [0:(C_PLB_AWIDTH-1)], BUS = SPLB
PORT PLB_PAValid = PLB_PAValid, DIR = I, BUS = SPLB
PORT PLB_SAValid = PLB_SAValid, DIR = I, BUS = SPLB
PORT PLB_rdPrim = PLB_rdPrim, DIR = I, BUS = SPLB
PORT PLB_wrPrim = PLB_wrPrim, DIR = I, BUS = SPLB
PORT PLB_masterID = PLB_masterID, DIR = I, VEC = [0:(C_PLB_MID_WIDTH-1)], BUS = SPLB
PORT PLB_abort = PLB_abort, DIR = I, BUS = SPLB
PORT PLB_busLock = PLB_busLock, DIR = I, BUS = SPLB
PORT PLB_RNW = PLB_RNW, DIR = I, BUS = SPLB
PORT PLB_BE = PLB_BE, DIR = I, VEC = [0:((C_PLB_DWIDTH/8)-1)], BUS = SPLB
PORT PLB_MSize = PLB_MSize, DIR = I, VEC = [0:1], BUS = SPLB
PORT PLB_size = PLB_size, DIR = I, VEC = [0:3], BUS = SPLB
PORT PLB_type = PLB_type, DIR = I, VEC = [0:2], BUS = SPLB
PORT PLB_compress = PLB_compress, DIR = I, BUS = SPLB
PORT PLB_guarded = PLB_guarded, DIR = I, BUS = SPLB
PORT PLB_ordered = PLB_ordered, DIR = I, BUS = SPLB
PORT PLB_lockErr = PLB_lockErr, DIR = I, BUS = SPLB
PORT PLB_wrDBus = PLB_wrDBus, DIR = I, VEC = [0:(C_PLB_DWIDTH-1)], BUS = SPLB
PORT PLB_wrBurst = PLB_wrBurst, DIR = I, BUS = SPLB
PORT PLB_rdBurst = PLB_rdBurst, DIR = I, BUS = SPLB
PORT PLB_pendReq = PLB_pendReq, DIR = I, BUS = SPLB
PORT PLB_pendPri = PLB_pendPri, DIR = I, VEC = [0:1], BUS = SPLB
PORT PLB_reqPri = PLB_reqPri, DIR = I, VEC = [0:1], BUS = SPLB
PORT Sl_addrAck = Sl_addrAck, DIR = O, BUS = SPLB
PORT Sl_SSize = Sl_SSize, DIR = O, VEC = [0:1], BUS = SPLB
PORT Sl_wait = Sl_wait, DIR = O, BUS = SPLB
PORT Sl_rearbitrate = Sl_rearbitrate, DIR = O, BUS = SPLB
PORT Sl_wrDAck = Sl_wrDAck, DIR = O, BUS = SPLB
PORT Sl_wrComp = Sl_wrComp, DIR = O, BUS = SPLB
PORT Sl_wrBTerm = Sl_wrBTerm, DIR = O, BUS = SPLB
PORT Sl_rdDBus = Sl_rdDBus, DIR = O, VEC = [0:(C_PLB_DWIDTH-1)], BUS = SPLB
PORT Sl_rdWdAddr = Sl_rdWdAddr, DIR = O, VEC = [0:3], BUS = SPLB
PORT Sl_rdDAck = Sl_rdDAck, DIR = O, BUS = SPLB
PORT Sl_rdComp = Sl_rdComp, DIR = O, BUS = SPLB
PORT Sl_rdBTerm = Sl_rdBTerm, DIR = O, BUS = SPLB
PORT Sl_MBusy = Sl_MBusy, DIR = O, VEC = [0:(C_PLB_NUM_MASTERS-1)], BUS = SPLB
PORT Sl_MErr = Sl_MErr, DIR = O, VEC = [0:(C_PLB_NUM_MASTERS-1)], BUS = SPLB
PORT IP2INTC_Irpt = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = EDGE_RISING
PORT DDR_Clk = "", DIR = O, VEC = [0:(C_NUM_CLK_PAIRS-1)], PERMIT = BASE_USER, DESC = 'DDR Clock', IO_IF = ddr_0, IO_IS = ddr_clk_out
PORT DDR_Clkn = "", DIR = O, VEC = [0:(C_NUM_CLK_PAIRS-1)], PERMIT = BASE_USER, DESC = 'DDR Inverted Clock', IO_IF = ddr_0, IO_IS = ddr_clk_out_n
PORT DDR_CKE = "", DIR = O, VEC = [0:(C_NUM_BANKS_MEM-1)], PERMIT = BASE_USER, DESC = 'DDR Clock Enable', IO_IF = ddr_0, IO_IS = clk_enable
PORT DDR_CSn = "", DIR = O, VEC = [0:(C_NUM_BANKS_MEM-1)], PERMIT = BASE_USER, DESC = 'Active LOW DDR Chip Select', IO_IF = ddr_0, IO_IS = chip_select
PORT DDR_RASn = "", DIR = O, PERMIT = BASE_USER, DESC = 'Active LOW DDR Row Address Strobe', IO_IF = ddr_0, IO_IS = row_addr_select
PORT DDR_CASn = "", DIR = O, PERMIT = BASE_USER, DESC = 'Active LOW DDR Column Address Strobe', IO_IF = ddr_0, IO_IS = col_addr_select
PORT DDR_WEn = "", DIR = O, PERMIT = BASE_USER, DESC = 'Active LOW DDR Write Enable', IO_IF = ddr_0, IO_IS = write_enable
PORT DDR_DM = "", DIR = O, VEC = [0:((C_DDR_DWIDTH/8)-1)], PERMIT = BASE_USER, DESC = 'DDR Data mask', IO_IF = ddr_0, IO_IS = data_mask
PORT DDR_BankAddr = "", DIR = O, VEC = [0:(C_DDR_BANK_AWIDTH-1)], PERMIT = BASE_USER, DESC = 'DDR Bank Address', IO_IF = ddr_0, IO_IS = bank_addr
PORT DDR_Addr = "", DIR = O, VEC = [0:(C_DDR_AWIDTH-1)], PERMIT = BASE_USER, DESC = 'DDR Address', IO_IF = ddr_0, IO_IS = address
PORT DDR_DQ = "", DIR = IO, VEC = [0:(C_DDR_DWIDTH-1)], THREE_STATE = TRUE, ENABLE = MULTI, PERMIT = BASE_USER, DESC = 'DDR Data IO', IO_IF = ddr_0, IO_IS = data, TRI_I = DDR_DQ_I, TRI_O = DDR_DQ_O, TRI_T = DDR_DQ_T
PORT DDR_DQS = "", DIR = IO, VEC = [0:((C_DDR_DWIDTH/8)-1)], THREE_STATE = TRUE, ENABLE = MULTI, PERMIT = BASE_USER, DESC = 'DDR Data Strobe', IO_IF = ddr_0, IO_IS = data_strobe, TRI_I = DDR_DQS_I, TRI_O = DDR_DQS_O, TRI_T = DDR_DQS_T
PORT DDR_DM_ECC = "", DIR = O, PERMIT = BASE_USER, DESC = 'DDR ECC Data Mask', IO_IF = ddr_0, IO_IS = ecc_data_mask
PORT DDR_DQ_ECC = "", DIR = IO, VEC = [0:(NUM_ECC_BITS-1)], THREE_STATE = TRUE, ENABLE = MULTI, PERMIT = BASE_USER, DESC = 'DDR ECC Data IO', IO_IF = ddr_0, IO_IS = ecc_data, TRI_I = DDR_DQ_ECC_I, TRI_O = DDR_DQ_ECC_O, TRI_T = DDR_DQ_ECC_T
PORT DDR_DQS_ECC = "", DIR = IO, THREE_STATE = TRUE, PERMIT = BASE_USER, DESC = 'DDR ECC Data Strobe', IO_IF = ddr_0, IO_IS = ecc_data_strobe, TRI_I = DDR_DQS_ECC_I, TRI_O = DDR_DQS_ECC_O, TRI_T = DDR_DQS_ECC_T
PORT DDR_Init_done = "", DIR = O
PORT DDR_DQ_I = "", DIR = I, VEC = [0:(C_DDR_DWIDTH-1)]
PORT DDR_DQ_O = "", DIR = O, VEC = [0:(C_DDR_DWIDTH-1)]
PORT DDR_DQ_T = "", DIR = O, VEC = [0:(C_DDR_DWIDTH-1)]
PORT DDR_DQS_I = "", DIR = I, VEC = [0:((C_DDR_DWIDTH/8)-1)]
PORT DDR_DQS_O = "", DIR = O, VEC = [0:((C_DDR_DWIDTH/8)-1)]
PORT DDR_DQS_T = "", DIR = O, VEC = [0:((C_DDR_DWIDTH/8)-1)]
PORT DDR_DQ_ECC_I = "", DIR = I, VEC = [0:(NUM_ECC_BITS-1)]
PORT DDR_DQ_ECC_O = "", DIR = O, VEC = [0:(NUM_ECC_BITS-1)]
PORT DDR_DQ_ECC_T = "", DIR = O, VEC = [0:(NUM_ECC_BITS-1)]
PORT DDR_DQS_ECC_I = "", DIR = I
PORT DDR_DQS_ECC_O = "", DIR = O
PORT DDR_DQS_ECC_T = "", DIR = O

END
