--------------------------------------------------------------------------------
-- This VHDL file is generated by EASE/HDL from HDL Works B.V.,
-- the 'Graphical Systems Design Tool'.
--
-- Ease 5.2 Revision 5.
-- Design library : design.
-- Host name      : ILYA.
-- User name      : .
-- Time stamp     : Thu Oct 21 23:32:52 2004.
--
-- Designed by    : 
-- Company        : HDL Works.
-- Design info    : 
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- Entity declaration of 'OPB_FLASH_CONTROLLER'.
-- Last modified : Fri Oct 22 01:18:12 2004.
--------------------------------------------------------------------------------


library ieee ;
use ieee.std_logic_1164.all ;

entity OPB_FLASH_CONTROLLER is
  generic(
    OPB_FC_BASEADDR :  std_logic_vector(0 to 31) := X"FFFF0000" ;
    OPB_FC_HIGHADDR :  std_logic_vector(0 to 31) := X"FFFFFFFF" ;
    FL0_BASEADDR    :  std_logic_vector(0 to 31) := X"00000000" ;
    FL0_HIGHADDR    :  std_logic_vector(0 to 31) := X"000003FF" ;
    FL1_BASEADDR    :  std_logic_vector(0 to 31) := X"00000400" ;
    N_MEM           :  integer := 4 ;
    FL1_HIGHADDR    :  std_logic_vector(0 to 31) := X"000004FF" ;
    C_OPB_AWIDTH    :  integer := 32 ;
    C_OPB_DWIDTH    :  integer := 32 ;
    C_FAMILY        :  string := "Virtex2p" ;
    FL2_BASEADDR    :  std_logic_vector(0 to 31) := X"00000500" ;
    FL3_BASEADDR    :  std_logic_vector(0 to 31) := X"00000600" ;
    FL2_HIGHADDR    :  std_logic_vector(0 to 31) := X"000005FF" ;
    FL3_HIGHADDR    :  std_logic_vector(0 to 31) := X"000006FF" );
  port(
    Sl_xferAck  : out    std_logic;
    Sl_errAck   : out    std_logic;
    Sl_retry    : out    std_logic;
    Sl_toutSup  : out    std_logic;
    OPB_Clk     : in     std_logic;
    OPB_Rst     : in     std_logic;
    OPB_select  : in     std_logic;
    OPB_RNW     : in     std_logic;
    OPB_seqAddr : in     std_logic;
    OPB_DBus    : in     std_logic_vector(0 to 31);
    OPB_ABus    : in     std_logic_vector(0 to 31);
    Sl_DBus     : out    std_logic_vector(0 to 31);
	periph_reset: in std_logic;	
    Flash_DQ_I  : in     std_logic_vector(0 to 15) := X"AAAA";
    Flash_A     : out    std_logic_vector(0 to 31);
    Flash_WEN   : out    std_logic;
    Flash_OEN   : out    std_logic;
    Flash_CEN   : out    std_logic_vector(0 to 3);
    Flash_Rst   : out    std_logic;
    Flash_DQ_O  : out    std_logic_vector(0 to 15);
    Flash_DQ_T  : out    std_logic);
end entity OPB_FLASH_CONTROLLER ;

--------------------------------------------------------------------------------
-- Architecture 'structure' of 'OPB_FLASH_CONTROLLER'
-- Last modified : Fri Oct 22 01:18:12 2004.
--------------------------------------------------------------------------------

architecture structure of OPB_FLASH_CONTROLLER is

  component OPB_INREG
    port(
      OPB_DBus         : in     std_logic_vector(0 to 31);
      OPB_RNW          : in     std_logic;
      OPB_ABus         : in     std_logic_vector(0 to 31);
      OPB_select       : in     std_logic;
      Bus2IP_ABus      : out    std_logic_vector(0 to 31);
      Bus2IP_DBus      : out    std_logic_vector(0 to 31);
      Bus2IP_AddrValid : out    std_logic;
      Bus2IP_RNW       : out    std_logic;
      OPB_Clk          : in     std_logic;
      OPB_Rst          : in     std_logic;
      C_Ack            : in     std_logic);
  end component OPB_INREG ;

  component OPB_OUTREG
    port(
      IP2Bus_DBus      : in     std_logic_vector(0 to 31);
      Sl_DBus          : out    std_logic_vector(0 to 31);
      Sl_xferAck       : out    std_logic;
      OPB_Clk          : in     std_logic;
      OPB_Rst          : in     std_logic;
      IP2xferAck       : in     std_logic;
      Bus2IP_AddrValid : in     std_logic;
      Bus2IP_RNW       : in     std_logic;
      Sl_toutSup       : out    std_logic;
      IP2toutSup       : in     std_logic);
  end component OPB_OUTREG ;

  component OPB_ADDR_DEC
    generic(
      OPB_FC_BASEADDR :  std_logic_vector(0 to 31);
      OPB_FC_HIGHADDR :  std_logic_vector(0 to 31);
      MEM0_BADDR      :  std_logic_vector(0 to 31);
      MEM0_HADDR      :  std_logic_vector(0 to 31);
      MEM1_BADDR      :  std_logic_vector(0 to 31);
      MEM1_HADDR      :  std_logic_vector(0 to 31);
      MEM2_BADDR      :  std_logic_vector(0 to 31);
      MEM3_HADDR      :  std_logic_vector(0 to 31);
      MEM2_HADDR      :  std_logic_vector(0 to 31);
      MEM3_BADDR      :  std_logic_vector(0 to 31));
    port(
      OPB_Rst       : in     std_logic;
      OPB_Clk       : in     std_logic;
      ADDR_DEC_ABus : in     std_logic_vector(0 to 31);
      ADDR_DEC_RNW  : in     std_logic;
      C_Ack         : in     std_logic;
      Bus2IP_CE     : out    std_logic_vector(0 to 3));
  end component OPB_ADDR_DEC ;

  component OPB_FLASH_CONTROL
    port(
      F_ADDR     : out    std_logic_vector(0 to 31);
      F_DATA_I   : in     std_logic_vector(0 to 15);
      F_WEN      : out    std_logic;
      F_OEN      : out    std_logic;
      F_CEN      : out    std_logic_vector(0 to 3);
      F_RST      : out    std_logic;
      F_DBus_in  : in     std_logic_vector(0 to 31);
      F_ABus     : in     std_logic_vector(0 to 31);
      F_DBus_out : out    std_logic_vector(0 to 31);
      OPB_Clk    : in     std_logic;
      OPB_Rst    : in     std_logic;
      F_DATA_O   : out    std_logic_vector(0 to 15);
      F_DATA_T   : out    std_logic;
      F_CE       : in     std_logic_vector(0 to 3);
      C_Ack      : out    std_logic;
      C_Mem_Hit  : out    std_logic;
      F_RNW      : in     std_logic);
  end component OPB_FLASH_CONTROL ;

  signal IP2Bus_DBus      :  std_logic_vector(0 to 31);
  signal C_Ack            :  std_logic;
  signal C_Mem_Hit        :  std_logic;
  signal Bus2IP_CE        :  std_logic_vector(0 to 3);
  signal Bus2IP_ABus      :  std_logic_vector(0 to 31);
  signal Bus2IP_DBus      :  std_logic_vector(0 to 31);
  signal Bus2IP_AddrValid :  std_logic;
  signal Bus2IP_RNW       :  std_logic;

begin
Flash_Rst<= not periph_reset;
  Sl_errAck <= '0';
  Sl_retry <= '0';

  OPB_INREG_INST: OPB_INREG
    port map(
      OPB_DBus => OPB_DBus,
      OPB_RNW => OPB_RNW,
      OPB_ABus => OPB_ABus,
      OPB_select => OPB_select,
      Bus2IP_ABus => Bus2IP_ABus,
      Bus2IP_DBus => Bus2IP_DBus,
      Bus2IP_AddrValid => Bus2IP_AddrValid,
      Bus2IP_RNW => Bus2IP_RNW,
      OPB_Clk => OPB_Clk,
      OPB_Rst => OPB_Rst,
      C_Ack => C_Ack);

  OPB_OUTREG_INST: OPB_OUTREG
    port map(
      IP2Bus_DBus => IP2Bus_DBus,
      Sl_DBus => Sl_DBus,
      Sl_xferAck => Sl_xferAck,
      OPB_Clk => OPB_Clk,
      OPB_Rst => OPB_Rst,
      IP2xferAck => C_Ack,
      Bus2IP_AddrValid => Bus2IP_AddrValid,
      Bus2IP_RNW => Bus2IP_RNW,
      Sl_toutSup => Sl_toutSup,
      IP2toutSup => C_Mem_Hit);

  OPB_ADDR_DEC_INST: OPB_ADDR_DEC
    generic map(
      OPB_FC_BASEADDR => OPB_FC_BASEADDR,
      OPB_FC_HIGHADDR => OPB_FC_HIGHADDR,
      MEM0_BADDR => FL0_BASEADDR,
      MEM0_HADDR => FL0_HIGHADDR,
      MEM1_BADDR => FL1_BASEADDR,
      MEM1_HADDR => FL1_HIGHADDR,
      MEM2_BADDR => FL2_BASEADDR,
      MEM3_HADDR => FL3_HIGHADDR,
      MEM2_HADDR => FL2_HIGHADDR,
      MEM3_BADDR => FL3_BASEADDR)

    port map(
      OPB_Rst => OPB_Rst,
      OPB_Clk => OPB_Clk,
      ADDR_DEC_ABus => Bus2IP_ABus,
      ADDR_DEC_RNW => Bus2IP_RNW,
      C_Ack => C_Ack,
      Bus2IP_CE => Bus2IP_CE);

  OPB_FLASH_CONTROL_INST: OPB_FLASH_CONTROL
    port map(
      F_ADDR => Flash_A,
      F_DATA_I => Flash_DQ_I,
      F_WEN => Flash_WEN,
      F_OEN => Flash_OEN,
      F_CEN => Flash_CEN,
      F_RST => open,
      F_DBus_in => Bus2IP_DBus,
      F_ABus => Bus2IP_ABus,
      F_DBus_out => IP2Bus_DBus,
      OPB_Clk => OPB_Clk,
      OPB_Rst => OPB_Rst,
      F_DATA_O => Flash_DQ_O,
      F_DATA_T => Flash_DQ_T,
      F_CE => Bus2IP_CE,
      C_Ack => C_Ack,
      C_Mem_Hit => C_Mem_Hit,
      F_RNW => Bus2IP_RNW);
end architecture structure ; -- of OPB_FLASH_CONTROLLER

