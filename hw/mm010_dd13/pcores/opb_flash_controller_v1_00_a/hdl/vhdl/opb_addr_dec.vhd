--------------------------------------------------------------------------------
-- This VHDL file is generated by EASE/HDL from HDL Works B.V.,
-- the 'Graphical Systems Design Tool'.
--
-- Ease 5.2 Revision 5.
-- Design library : design.
-- Host name      : ILYA.
-- User name      : .
-- Time stamp     : Thu Oct 21 23:32:52 2004.
--
-- Designed by    : 
-- Company        : HDL Works.
-- Design info    : 
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- Entity declaration of 'OPB_ADDR_DEC'.
-- Last modified : Fri Oct 22 01:25:14 2004.
--------------------------------------------------------------------------------


library ieee ;
use ieee.std_logic_1164.all ;
use ieee.std_logic_arith.all ;
use ieee.std_logic_unsigned.all ;

entity OPB_ADDR_DEC is
  generic(
    OPB_FC_BASEADDR :  std_logic_vector(0 to 31) ;
    OPB_FC_HIGHADDR :  std_logic_vector(0 to 31) ;
    MEM0_BADDR      :  std_logic_vector(0 to 31) ;
    MEM0_HADDR      :  std_logic_vector(0 to 31) ;
    MEM1_BADDR      :  std_logic_vector(0 to 31) ;
    MEM1_HADDR      :  std_logic_vector(0 to 31) ;
    MEM2_BADDR      :  std_logic_vector(0 to 31) ;
    MEM3_HADDR      :  std_logic_vector(0 to 31) ;
    MEM2_HADDR      :  std_logic_vector(0 to 31) ;
    MEM3_BADDR      :  std_logic_vector(0 to 31) );
  port(
    OPB_Rst       : in     std_logic;
    OPB_Clk       : in     std_logic;
    ADDR_DEC_ABus : in     std_logic_vector(0 to 31);
    ADDR_DEC_RNW  : in     std_logic;
    C_Ack         : in     std_logic;
    Bus2IP_CE     : out    std_logic_vector(0 to 3));
end entity OPB_ADDR_DEC ;

--------------------------------------------------------------------------------
-- Architecture 'rtl' of 'OPB_ADDR_DEC'
-- Last modified : Fri Oct 22 01:25:14 2004.
--------------------------------------------------------------------------------
 
architecture rtl of OPB_ADDR_DEC is

constant N_DEC_BIT : integer := 7;

------------------------------
-- ADDR COMPARATOR SIGNALS
------------------------------
signal MEM0_ADDR_HIT_COMP : std_logic;
signal MEM1_ADDR_HIT_COMP : std_logic;
signal MEM2_ADDR_HIT_COMP : std_logic;
signal MEM3_ADDR_HIT_COMP : std_logic;

signal MEM0_ADDR_HIT_COMP_BASEADDR : std_logic;
signal MEM0_ADDR_HIT_COMP_HIGHADDR : std_logic;
signal MEM1_ADDR_HIT_COMP_BASEADDR : std_logic;
signal MEM1_ADDR_HIT_COMP_HIGHADDR : std_logic;
signal MEM2_ADDR_HIT_COMP_BASEADDR : std_logic;
signal MEM2_ADDR_HIT_COMP_HIGHADDR : std_logic;
signal MEM3_ADDR_HIT_COMP_BASEADDR : std_logic;
signal MEM3_ADDR_HIT_COMP_HIGHADDR : std_logic;
------------------------------

signal Bus2IP_CE_REG : std_logic_vector(0 to 3);

begin                                                    

MEM0_ADDR_HIT_COMP <= MEM0_ADDR_HIT_COMP_BASEADDR or MEM0_ADDR_HIT_COMP_HIGHADDR;
MEM1_ADDR_HIT_COMP <= MEM1_ADDR_HIT_COMP_BASEADDR or MEM1_ADDR_HIT_COMP_HIGHADDR;
MEM2_ADDR_HIT_COMP <= MEM2_ADDR_HIT_COMP_BASEADDR or MEM2_ADDR_HIT_COMP_HIGHADDR;
MEM3_ADDR_HIT_COMP <= MEM3_ADDR_HIT_COMP_BASEADDR or MEM3_ADDR_HIT_COMP_HIGHADDR;

MEM0_ADDR_HIT_COMP_BASEADDR <= '0' when ADDR_DEC_ABus(0 to N_DEC_BIT) >= MEM0_BADDR(0 to N_DEC_BIT) else '1';
MEM0_ADDR_HIT_COMP_HIGHADDR <= '0' when ADDR_DEC_ABus(0 to N_DEC_BIT) <= MEM0_HADDR(0 to N_DEC_BIT) else '1';

MEM1_ADDR_HIT_COMP_BASEADDR <= '0' when ADDR_DEC_ABus(0 to N_DEC_BIT) >= MEM1_BADDR(0 to N_DEC_BIT) else '1';
MEM1_ADDR_HIT_COMP_HIGHADDR <= '0' when ADDR_DEC_ABus(0 to N_DEC_BIT) <= MEM1_HADDR(0 to N_DEC_BIT) else '1';

MEM2_ADDR_HIT_COMP_BASEADDR <= '0' when ADDR_DEC_ABus(0 to N_DEC_BIT) >= MEM2_BADDR(0 to N_DEC_BIT) else '1';
MEM2_ADDR_HIT_COMP_HIGHADDR <= '0' when ADDR_DEC_ABus(0 to N_DEC_BIT) <= MEM2_HADDR(0 to N_DEC_BIT) else '1';

MEM3_ADDR_HIT_COMP_BASEADDR <= '0' when ADDR_DEC_ABus(0 to N_DEC_BIT) >= MEM3_BADDR(0 to N_DEC_BIT) else '1';
MEM3_ADDR_HIT_COMP_HIGHADDR <= '0' when ADDR_DEC_ABus(0 to N_DEC_BIT) <= MEM3_HADDR(0 to N_DEC_BIT) else '1';

process(OPB_Clk)
begin
	if OPB_Clk'event and OPB_Clk = '1' then
    	if (OPB_Rst = '1' or C_Ack = '1') then
    			Bus2IP_CE_REG(0)	<= '1';
    			Bus2IP_CE_REG(1)	<= '1';
    			Bus2IP_CE_REG(2)	<= '1';
    			Bus2IP_CE_REG(3)	<= '1';
    		else
    			Bus2IP_CE_REG(0)	<= MEM0_ADDR_HIT_COMP;
    			Bus2IP_CE_REG(1)	<= MEM1_ADDR_HIT_COMP;
    			Bus2IP_CE_REG(2)	<= MEM2_ADDR_HIT_COMP;
    			Bus2IP_CE_REG(3)	<= MEM3_ADDR_HIT_COMP;
    	end if;
    end if;
end process;

Bus2IP_CE(0) <= Bus2IP_CE_REG(0);
Bus2IP_CE(1) <= Bus2IP_CE_REG(1);
Bus2IP_CE(2) <= Bus2IP_CE_REG(2);
Bus2IP_CE(3) <= Bus2IP_CE_REG(3);

end architecture rtl ; -- of OPB_ADDR_DEC

