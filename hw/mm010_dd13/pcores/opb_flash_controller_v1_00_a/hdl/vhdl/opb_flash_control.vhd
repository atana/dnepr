--------------------------------------------------------------------------------
-- This VHDL file is generated by EASE/HDL from HDL Works B.V.,
-- the 'Graphical Systems Design Tool'.
--
-- Ease 5.2 Revision 5.
-- Design library : design.
-- Host name      : ILYA.
-- User name      : .
-- Time stamp     : Thu Oct 21 23:32:52 2004.
--
-- Designed by    : 
-- Company        : HDL Works.
-- Design info    : 
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- Entity declaration of 'OPB_FLASH_CONTROL'.
-- Last modified : Thu Oct 21 23:32:52 2004.
--------------------------------------------------------------------------------


library ieee ;
use ieee.std_logic_1164.all ;
use ieee.std_logic_unsigned.all ;
use ieee.std_logic_arith.all ;

entity OPB_FLASH_CONTROL is
  port(
    F_ADDR     : out    std_logic_vector(0 to 31);
    F_DATA_I   : in     std_logic_vector(0 to 15);
    F_WEN      : out    std_logic;
    F_OEN      : out    std_logic;
    F_CEN      : out    std_logic_vector(0 to 3);
    F_RST      : out    std_logic;
    F_DBus_in  : in     std_logic_vector(0 to 31);
    F_ABus     : in     std_logic_vector(0 to 31);
    F_DBus_out : out    std_logic_vector(0 to 31);
    OPB_Clk    : in     std_logic;
    OPB_Rst    : in     std_logic;
    F_DATA_O   : out    std_logic_vector(0 to 15);
    F_DATA_T   : out    std_logic;
    F_CE       : in     std_logic_vector(0 to 3);
    C_Ack      : out    std_logic;
    C_Mem_Hit  : out    std_logic;
    F_RNW      : in     std_logic);
  attribute rom_style: string;
  attribute rom_style of OPB_FLASH_CONTROL : entity is "distributed";
end entity OPB_FLASH_CONTROL ;

--------------------------------------------------------------------------------
-- Architecture 'rtl' of 'OPB_FLASH_CONTROL'
-- Last modified : Thu Oct 21 23:32:52 2004.
--------------------------------------------------------------------------------

architecture rtl of OPB_FLASH_CONTROL is

signal ADDR : std_logic_vector(4 downto 0);
signal ROM_EN : std_logic;
signal INCBit : std_logic;
signal NextWord : std_logic;
signal Ack_Rd, Ack_Wr, Ack : std_logic; 

begin

ROM_EN <= (F_CE(0) xor F_CE(1) xor F_CE(2) xor F_CE(3));
-- Ack_Rd <= '1' when ADDR = "10110" else '0';
-- Ack_Wr <= '1' when ADDR = "01011" else '0';

Ack_Rd <= '1' when ADDR = "10111" else '0';
Ack_Wr <= '1' when ADDR = "01111" else '0';

Ack <=  Ack_Rd or (Ack_Wr and (not F_RNW));
INCBit <= NextWord and (not F_ABus(30));

C_Mem_Hit <= ROM_EN; 
C_Ack <= Ack;

process (OPB_Clk)
begin
   if (OPB_Clk'event and OPB_Clk = '1') then
   	if (OPB_Rst = '1' or Ack = '1') then
   		NextWord <= '0';
   	elsif Ack_Wr = '1' then 
   		NextWord <= '1';
	end if;   
   end if;
end process;

process(OPB_Clk)
begin
	if (OPB_Clk'event and OPB_Clk = '1') then
		if (OPB_Rst = '1' or ROM_EN = '0') then
			ADDR <= (others => '0');	
    	else
    		ADDR <= ADDR + 1;
    	end if;
    end if;
end process;

process(OPB_Clk)
begin
	if OPB_Clk'event and OPB_Clk = '1' then
		if (OPB_Rst = '1' or Ack = '1') then
			F_ADDR(6 to 30) <= (others => '0');
            F_DATA_O <= (others => '0');    
    		F_CEN <= (others => '1');
    		F_WEN <= '1'; 
    		F_OEN <= '1';
    		F_DATA_T <= '1';
    	elsif ROM_EN = '1' then	
            F_ADDR(6 to 30) <= F_ABus(6 to 30)+("000000000000000000000000"&INCBit);
            F_DATA_O <= F_DBus_in(0 to 15);    
    		F_CEN <= F_CE;
    		F_WEN <= F_RNW; 
    		F_OEN <= not F_RNW;
    		F_DATA_T <= F_RNW;
		end if;    
    end if;
end process;

process(OPB_Clk)
begin
	if OPB_Clk'event and OPB_Clk = '1' then
		if (OPB_Rst = '1') then
			F_DBus_out(16 to 31)<= (others => '0');
            F_DBus_out(0 to 15) <= (others => '0');
    	elsif ROM_EN = '1' then
    		if NextWord = '1' then F_DBus_out(16 to 31) <= F_DATA_I;end if;
    		if NextWord = '0' then F_DBus_out(0 to 15) 	<= F_DATA_I;end if;
    	end if;
    end if;
end process;

end architecture rtl ; -- of OPB_FLASH_CONTROL
